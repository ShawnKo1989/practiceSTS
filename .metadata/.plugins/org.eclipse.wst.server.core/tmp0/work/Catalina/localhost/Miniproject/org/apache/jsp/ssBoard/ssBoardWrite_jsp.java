/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-08-21 12:16:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ssBoard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ssBoardWrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시글 작성</title>\r\n");
      out.write("<script src=\"/Miniproject/js/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("<link href=\"/Miniproject/css/ssBoardWrite.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"outline\">\r\n");
      out.write("		<div class=\"alignDiv\">\r\n");
      out.write("		<div class=\"toptextArea\">\r\n");
      out.write("		<h1>게시글 작성</h1><br/>\r\n");
      out.write("		<h3>스크린샷 게시판에 업로드 되는 스크린샷/동영상 컨텐츠 작성 페이지입니다.</h3>\r\n");
      out.write("		</div>\r\n");
      out.write("		<form action=\"/Miniproject/Controller\" method=\"post\">\r\n");
      out.write("		<input type=\"hidden\" name=\"command\" value=\"SsBoardWriteAction\">\r\n");
      out.write("		<table>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\">\r\n");
      out.write("					<div>\r\n");
      out.write("						카테고리 : <select name=\"writingCategory\" id=\"ssBoardCategory\" required>\r\n");
      out.write("							<option>스크린샷</option>\r\n");
      out.write("							<option>동영상</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>게시물 제목</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<div>\r\n");
      out.write("						<input type=\"text\" name=\"ssBoardTitle\" class=\"writingArea1\" autocomplete=\"off\" placeholder=\"제목을 입력하세요\">\r\n");
      out.write("					</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th colspan=\"2\">게시물 내용</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\">\r\n");
      out.write("					<div>\r\n");
      out.write("						<textarea cols=\"50\" rows=\"10\" name=\"ssBoardContent\" class=\"writingArea2\" autocomplete=\"off\" placeholder=\"내용을 입력하세요\"></textarea>\r\n");
      out.write("					</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\">\r\n");
      out.write("					<div>\r\n");
      out.write("						<input type=\"file\" id=\"uploadFile\" required>\r\n");
      out.write("					</div>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("		<div class=\"bottomBtnArea\">\r\n");
      out.write("			<button id=\"writingUploadBtn\" class=\"bottomBtn\">작성완료</button>\r\n");
      out.write("			<div id=\"MovetoBoardList\" class=\"bottomBtn\"><p>목록으로</p></div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div id=\"uploadedImageContainer\"></div>\r\n");
      out.write("		</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("	//콘텐츠 클릭시 해당 콘텐츠페이지로 이동\r\n");
      out.write("	$(function(){\r\n");
      out.write("		$(\"#MovetoBoardList\").click(function(){\r\n");
      out.write("			location.href=\"/Miniproject/Controller?command=SsBoardListMoveAction\";\r\n");
      out.write("		});\r\n");
      out.write("		$(\"#writingUploadBtn\").click(function(){\r\n");
      out.write("			const fileDOM = document.querySelector('#uploadFile');\r\n");
      out.write("			const src = URL.createObjectURL(fileDOM.files[0]);\r\n");
      out.write("			$('table').append(\"<input type='hidden' name='ssBoardContents' id='aaa' value='\"+src+\"'>\");\r\n");
      out.write("			const imgTag = \"<img src='\" + src + \"' alt='Uploaded Image'>\";\r\n");
      out.write("	        $('#uploadedImageContainer').html(imgTag);\r\n");
      out.write("			return true;\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
